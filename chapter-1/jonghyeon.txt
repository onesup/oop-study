* 1장 객체지향 디자인

디자인 패턴, 디자인 설계

1. 디자인 패턴을 따르더라도 완벽한 애플리케이션이 나오는 것은 아니다.
- 완벽한 코드를 구현하는 것은 불가능하다. 리팩토링은 계속 되어야하고, 계속하여 더 좋은 코드로 수정이 필요하다.

2. 디자인 설계 Metrics를 가능한 지켜주어야한다.
- 메트릭 점수를 측정하여, 기준을 초과하는 상황이 발생하게되면 추후 유지보수에 많은 어려움이 발생한다.
- 실제 사례로 함수 라인수, 함수 호출/ 호출자 개수, 복잡도등을 고려하지 않은 코드는 추후에 문제가 발생할 경우 다시 작성해야되는 경우가 발생하게 될 수도 있다.

3. 객체지향적인 설계를 통해 절차적 언어도 객체지향적으로 사용할 필요가 있다.
- 데이터 타입을 지정하지 않고, 유동적인 흐름을 위해서는 객체지향적으로 설계를 할 필요가 있다.
- 인터페이스 활용에 대한 문제를 고려하여, 설계 구성을 하면 유연하게 데이터 흐름을 만들 수 있다는 장점이 있다.
- 이는 클래스 상속과도 이어지는 개념으로 보인다.
- 우선 객체지향의 특징중 은닉성이 (클래스 타입에 따라)보장이되고, 캡슐화가 간편해 지는 장점이 예상된다.
- 하지만 우려되는 점은 만약 클래스의 크기가 크다면 메모리 상의 문제가 발생할 것 같기도 하다.
- 최근 PC들은 성능이 매우 좋기때문에 크게 우려가 되진 않지만, 만약 오래된 PC에 해당 애플리케이션을 구동하게 된다면 메모리 문제 발생이 우려된다.
